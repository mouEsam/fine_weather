plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id "kotlin-kapt"
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id "com.google.protobuf"
}

def localPropertiesFile = rootProject.file("local.properties") as File
def localProperties = new Properties()
localProperties.load(new FileInputStream(localPropertiesFile))

android {
    namespace 'com.iti.fineweather'
    compileSdk 33

    defaultConfig {
        applicationId "com.iti.fineweather"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "WEATHER_API_KEY", "\"${localProperties["WEATHER_API_KEY"]}\"")

        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_compiler_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

configurations {
    configureEach {
        resolutionStrategy {
            force "com.google.protobuf:protobuf-java:$protobuf_version"
        }
    }
}

dependencies {

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$jdk_desuger_version"

    implementation "androidx.core:core-ktx:$core_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.palette:palette:$palette_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Coroutine lifecycle ext
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.ui:ui-text-google-fonts:$compose_version"
//    implementation "androidx.compose.material:material:$compose_ui_version"
    implementation "androidx.compose.material:material-icons-core:$compose_ui_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_ui_version"
    implementation "androidx.compose.material3:material3:$compose_material_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    implementation "androidx.activity:activity-compose:$compose_navigation_version"
    implementation "androidx.navigation:navigation-compose:$navigation_version"
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_permissions_version"

    debugImplementation "androidx.customview:customview:1.2.0-alpha02"
    debugImplementation "androidx.customview:customview-poolingcontainer:1.0.0"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Coil
    implementation "io.coil-kt:coil:$coil_version"
    implementation "io.coil-kt:coil-compose:$coil_version"
    implementation "io.coil-kt:coil-svg:$coil_version"
    implementation "com.google.accompanist:accompanist-coil:$accompanist_coil_version"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-common:$hilt_common_version"
    implementation "androidx.hilt:hilt-work:$hilt_common_version"
    implementation "androidx.hilt:hilt-navigation-compose:$hilt_navigation_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_compiler_version"

    // Google maps
    implementation "com.google.maps.android:maps-compose:$google_maps_version"
    implementation "com.google.android.gms:play-services-maps:$playservices_maps_version"
    implementation "com.google.android.libraries.places:places:$google_places_version"


    // Datastore
    implementation "androidx.datastore:datastore:$proto_datastore_version"
    implementation  "com.google.protobuf:protobuf-java:$protobuf_version"

    // WorkManager
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.work:work-multiprocess:$work_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Timeshape
    implementation("net.iakovlev:timeshape:$timeshape_version") {
        // Exclude standard compression library
        exclude group: 'com.github.luben', module: 'zstd-jni'
    }
    implementation "com.github.luben:zstd-jni:$timeshape_compression_native_version@aar"

    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_compiler_version"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
